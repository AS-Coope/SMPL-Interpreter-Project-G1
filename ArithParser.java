
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\024\002" +
    "\000\002\004\005\000\002\004\003\000\002\014\007\000" +
    "\002\015\011\000\002\016\005\000\002\016\005\000\002" +
    "\006\012\000\002\006\013\000\002\007\005\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\005\006" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\021" +
    "\005\000\002\021\003\000\002\011\006\000\002\012\005" +
    "\000\002\012\003\000\002\013\003\000\002\013\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\005\000\002" +
    "\022\003\000\002\023\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\016\004\025\006\016\012\010\025\011\066" +
    "\005\067\023\001\002\000\022\002\ufffa\004\ufffa\006\ufffa" +
    "\012\ufffa\025\ufffa\031\ufffa\066\ufffa\067\ufffa\001\002\000" +
    "\036\013\uffde\014\uffde\026\uffde\027\uffde\032\uffde\033\uffde" +
    "\036\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\070\uffde\001\002\000\036\013\uffe4\014\uffe4\026\uffe4" +
    "\027\uffe4\032\uffe4\033\uffe4\036\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\070\uffe4\001\002\000\022" +
    "\002\ufffd\004\ufffd\006\ufffd\012\ufffd\025\ufffd\031\ufffd\066" +
    "\ufffd\067\ufffd\001\002\000\012\012\010\025\011\066\005" +
    "\067\023\001\002\000\012\012\010\025\011\066\005\067" +
    "\023\001\002\000\004\002\077\001\002\000\026\013\uffea" +
    "\014\uffea\026\uffea\027\uffea\032\uffea\033\uffea\036\uffea\046" +
    "\uffea\047\uffea\070\uffea\001\002\000\010\027\ufffc\046\040" +
    "\047\042\001\002\000\036\013\uffe6\014\uffe6\026\uffe6\027" +
    "\uffe6\032\uffe6\033\uffe6\036\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\050\070\uffe6\001\002\000\004\067" +
    "\072\001\002\000\034\013\uffec\014\uffec\026\uffec\027\uffec" +
    "\032\uffec\033\uffec\036\uffec\046\uffec\047\uffec\050\045\051" +
    "\046\052\044\070\uffec\001\002\000\026\013\uffeb\014\uffeb" +
    "\026\uffeb\027\uffeb\032\uffeb\033\uffeb\036\uffeb\046\uffeb\047" +
    "\uffeb\070\uffeb\001\002\000\036\013\uffdb\014\uffdb\026\uffdb" +
    "\027\uffdb\032\uffdb\033\uffdb\036\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\070\uffdb\001\002\000\022" +
    "\002\ufffe\004\ufffe\006\ufffe\012\ufffe\025\ufffe\031\ufffe\066" +
    "\ufffe\067\ufffe\001\002\000\040\013\uffdd\014\uffdd\025\062" +
    "\026\uffdd\027\uffdd\032\uffdd\033\uffdd\036\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\070\uffdd\001\002" +
    "\000\020\002\001\004\025\006\016\012\010\025\011\066" +
    "\005\067\023\001\002\000\004\067\026\001\002\000\004" +
    "\025\027\001\002\000\006\026\uffda\067\030\001\002\000" +
    "\006\026\ufff2\032\ufff2\001\002\000\006\026\ufff1\032\060" +
    "\001\002\000\004\026\034\001\002\000\004\026\ufff0\001" +
    "\002\000\004\033\035\001\002\000\014\012\010\025\011" +
    "\030\036\066\005\067\023\001\002\000\016\004\025\006" +
    "\016\012\010\025\011\066\005\067\023\001\002\000\010" +
    "\027\041\046\040\047\042\001\002\000\010\025\011\066" +
    "\005\067\023\001\002\000\022\002\ufff5\004\ufff5\006\ufff5" +
    "\012\ufff5\025\ufff5\031\ufff5\066\ufff5\067\ufff5\001\002\000" +
    "\010\025\011\066\005\067\023\001\002\000\034\013\uffed" +
    "\014\uffed\026\uffed\027\uffed\032\uffed\033\uffed\036\uffed\046" +
    "\uffed\047\uffed\050\045\051\046\052\044\070\uffed\001\002" +
    "\000\010\025\011\066\005\067\023\001\002\000\010\025" +
    "\011\066\005\067\023\001\002\000\010\025\011\066\005" +
    "\067\023\001\002\000\036\013\uffe8\014\uffe8\026\uffe8\027" +
    "\uffe8\032\uffe8\033\uffe8\036\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\050\070\uffe8\001\002\000\010\025" +
    "\011\066\005\067\023\001\002\000\036\013\uffe5\014\uffe5" +
    "\026\uffe5\027\uffe5\032\uffe5\033\uffe5\036\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\070\uffe5\001\002" +
    "\000\036\013\uffe9\014\uffe9\026\uffe9\027\uffe9\032\uffe9\033" +
    "\uffe9\036\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\053\050\070\uffe9\001\002\000\036\013\uffe7\014\uffe7\026" +
    "\uffe7\027\uffe7\032\uffe7\033\uffe7\036\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\050\070\uffe7\001\002\000" +
    "\034\013\uffee\014\uffee\026\uffee\027\uffee\032\uffee\033\uffee" +
    "\036\uffee\046\uffee\047\uffee\050\045\051\046\052\044\070" +
    "\uffee\001\002\000\020\004\025\006\016\012\010\025\011" +
    "\031\057\066\005\067\023\001\002\000\022\002\uffff\004" +
    "\uffff\006\uffff\012\uffff\025\uffff\031\uffff\066\uffff\067\uffff" +
    "\001\002\000\022\002\ufff4\004\ufff4\006\ufff4\012\ufff4\025" +
    "\ufff4\031\ufff4\066\ufff4\067\ufff4\001\002\000\004\067\061" +
    "\001\002\000\006\026\ufff3\032\ufff3\001\002\000\014\012" +
    "\010\025\011\026\uffda\066\005\067\023\001\002\000\004" +
    "\026\uffdf\001\002\000\006\026\uffe0\032\070\001\002\000" +
    "\012\026\uffe1\032\uffe1\046\040\047\042\001\002\000\004" +
    "\026\067\001\002\000\036\013\uffe3\014\uffe3\026\uffe3\027" +
    "\uffe3\032\uffe3\033\uffe3\036\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\070\uffe3\001\002\000\012\012" +
    "\010\025\011\066\005\067\023\001\002\000\012\026\uffe2" +
    "\032\uffe2\046\040\047\042\001\002\000\012\012\010\025" +
    "\011\066\005\067\023\001\002\000\010\027\074\046\040" +
    "\047\042\001\002\000\022\002\uffef\004\uffef\006\uffef\012" +
    "\uffef\025\uffef\031\uffef\066\uffef\067\uffef\001\002\000\004" +
    "\027\076\001\002\000\022\002\ufffb\004\ufffb\006\ufffb\012" +
    "\ufffb\025\ufffb\031\ufffb\066\ufffb\067\ufffb\001\002\000\004" +
    "\002\000\001\002\000\010\026\101\046\040\047\042\001" +
    "\002\000\036\013\uffdc\014\uffdc\026\uffdc\027\uffdc\032\uffdc" +
    "\033\uffdc\036\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\070\uffdc\001\002\000\004\036\110\001\002" +
    "\000\012\033\105\046\040\047\042\070\104\001\002\000" +
    "\012\012\010\025\011\066\005\067\023\001\002\000\012" +
    "\012\010\025\011\066\005\067\023\001\002\000\010\036" +
    "\ufff6\046\040\047\042\001\002\000\010\036\ufff7\046\040" +
    "\047\042\001\002\000\012\012\010\025\011\066\005\067" +
    "\023\001\002\000\012\013\112\014\113\046\040\047\042" +
    "\001\002\000\012\012\010\025\011\066\005\067\023\001" +
    "\002\000\026\013\ufff9\014\ufff9\026\ufff9\027\ufff9\032\ufff9" +
    "\033\ufff9\036\ufff9\046\ufff9\047\ufff9\070\ufff9\001\002\000" +
    "\010\014\115\046\040\047\042\001\002\000\026\013\ufff8" +
    "\014\ufff8\026\ufff8\027\ufff8\032\ufff8\033\ufff8\036\ufff8\046" +
    "\ufff8\047\ufff8\070\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\032\002\011\003\023\004\021\005\006\006" +
    "\003\011\020\014\017\015\012\017\013\020\016\021\014" +
    "\022\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\011\020\014\017" +
    "\015\012\016\101\017\102\020\016\021\014\022\005\001" +
    "\001\000\020\011\020\014\017\015\012\017\077\020\016" +
    "\021\014\022\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\055" +
    "\005\006\006\003\011\020\014\017\015\012\017\013\020" +
    "\016\021\014\022\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\030\010\031\023\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\020\014\017\015" +
    "\012\017\036\020\016\021\014\022\005\001\001\000\030" +
    "\003\054\004\021\005\006\006\003\011\020\014\017\015" +
    "\012\017\013\020\016\021\014\022\005\001\001\000\002" +
    "\001\001\000\012\011\020\020\053\021\014\022\005\001" +
    "\001\000\002\001\001\000\012\011\020\020\042\021\014" +
    "\022\005\001\001\000\002\001\001\000\010\011\020\021" +
    "\052\022\005\001\001\000\010\011\020\021\051\022\005" +
    "\001\001\000\010\011\020\021\046\022\005\001\001\000" +
    "\002\001\001\000\006\011\020\022\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\055\005\006\006\003\011\020\014\017" +
    "\015\012\017\013\020\016\021\014\022\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\011\020\012\063\013\065\014\017\015" +
    "\012\017\064\020\016\021\014\022\005\023\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\020\014\017" +
    "\015\012\017\070\020\016\021\014\022\005\001\001\000" +
    "\002\001\001\000\020\011\020\014\017\015\012\017\072" +
    "\020\016\021\014\022\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\011\020\014\017\015\012" +
    "\017\106\020\016\021\014\022\005\001\001\000\020\011" +
    "\020\014\017\015\012\017\105\020\016\021\014\022\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\011" +
    "\020\014\017\015\012\017\110\020\016\021\014\022\005" +
    "\001\001\000\002\001\001\000\020\011\020\014\017\015" +
    "\012\017\113\020\016\021\014\022\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
 RESULT = new Statement(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= expression NT$0 SEMI 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= funDefn 
            {
              Statement RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtFunDefn fd = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = fd;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // StmtIf ::= IF LogExp COLON expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpIf(le,consqt);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("StmtIf",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StmtIfElse ::= IF LogExp COLON expression ELSE expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp alt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpIf(le,consqt,alt);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("StmtIfElse",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LogExp ::= expression CMP expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("LogExp",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LogExp ::= expression EQU expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,Cmp.EQ);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("LogExp",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funDefn ::= FUN VAR LPAREN paramListE RPAREN EQU expression SEMI 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funDefn ::= FUN VAR LPAREN paramListE RPAREN EQU LBRACE stmtList RBRACE 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		pl.add(e); RESULT = pl;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = pl;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); RESULT = var;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definition ::= DEF VAR expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= StmtIf 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = t;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= StmtIfElse 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = e;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",14, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= factor POW pow 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpPow(f, p); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= pow 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpFunCall(v,a);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funCall",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argList ::= argList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		al.add(e); RESULT = al;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // argList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = pl;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ArrayList<Exp>(); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pow ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pow ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pow ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pow ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = fc;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",16, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",17, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
