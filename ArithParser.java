
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArithParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArithParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArithParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArithParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\032\002\000\002\004\005\000\002\004\003\000" +
    "\002\015\007\000\002\016\011\000\002\017\005\000\002" +
    "\017\005\000\002\007\012\000\002\007\013\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\006\006\000\002\005\006\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\012\006\000\002\013\005\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\027\010" +
    "\000\002\027\010\000\002\027\005\000\002\027\010\000" +
    "\002\027\006\000\002\027\006\000\002\027\006\000\002" +
    "\027\003\000\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\044\004\041\006\025\012\013\016\037\017" +
    "\017\020\020\021\034\022\011\025\014\035\022\060\006" +
    "\064\005\065\035\067\040\070\021\071\012\072\027\001" +
    "\002\000\050\002\ufff9\004\ufff9\006\ufff9\012\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\025\ufff9\031\ufff9\035" +
    "\ufff9\060\ufff9\064\ufff9\065\ufff9\067\ufff9\070\ufff9\071\ufff9" +
    "\072\ufff9\001\002\000\040\013\uffdc\014\uffdc\026\uffdc\027" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\036\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\066\uffdc\001\002\000" +
    "\004\025\163\001\002\000\040\013\uffe2\014\uffe2\026\uffe2" +
    "\027\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\066\uffe2\001\002" +
    "\000\050\002\ufffd\004\ufffd\006\ufffd\012\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\025\ufffd\031\ufffd\035\ufffd" +
    "\060\ufffd\064\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd\072" +
    "\ufffd\001\002\000\004\025\156\001\002\000\040\013\uffd9" +
    "\014\uffd9\026\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\036" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\066\uffd9\001\002\000\040\012\013\016\037\017\017\020" +
    "\020\021\034\022\011\025\014\035\022\060\006\064\005" +
    "\065\054\067\040\070\021\071\012\072\027\001\002\000" +
    "\040\012\013\016\037\017\017\020\020\021\034\022\011" +
    "\025\014\035\022\060\006\064\005\065\054\067\040\070" +
    "\021\071\012\072\027\001\002\000\004\002\137\001\002" +
    "\000\030\013\uffe8\014\uffe8\026\uffe8\027\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\036\uffe8\043\uffe8\044\uffe8\066\uffe8\001\002" +
    "\000\004\025\134\001\002\000\004\025\131\001\002\000" +
    "\040\013\uffda\014\uffda\026\uffda\027\uffda\032\uffda\033\uffda" +
    "\034\uffda\036\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\066\uffda\001\002\000\042\012\013\016\037" +
    "\017\017\020\020\021\034\022\011\025\014\034\uffcd\035" +
    "\022\060\006\064\005\065\054\067\040\070\021\071\012" +
    "\072\027\001\002\000\010\027\ufffb\043\062\044\063\001" +
    "\002\000\040\013\uffe4\014\uffe4\026\uffe4\027\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\036\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\071\066\uffe4\001\002\000\004\065\122" +
    "\001\002\000\036\013\uffea\014\uffea\026\uffea\027\uffea\032" +
    "\uffea\033\uffea\034\uffea\036\uffea\043\uffea\044\uffea\045\066" +
    "\046\067\047\065\066\uffea\001\002\000\040\013\uffd8\014" +
    "\uffd8\026\uffd8\027\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\066" +
    "\uffd8\001\002\000\030\013\uffe9\014\uffe9\026\uffe9\027\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\036\uffe9\043\uffe9\044\uffe9\066" +
    "\uffe9\001\002\000\050\002\ufffc\004\ufffc\006\ufffc\012\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\025\ufffc\031" +
    "\ufffc\035\ufffc\060\ufffc\064\ufffc\065\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\001\002\000\040\013\uffce\014\uffce\026" +
    "\uffce\027\uffce\032\uffce\033\uffce\034\uffce\036\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\066\uffce\001" +
    "\002\000\050\002\ufffe\004\ufffe\006\ufffe\012\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\025\ufffe\031\ufffe\035" +
    "\ufffe\060\ufffe\064\ufffe\065\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\001\002\000\004\025\117\001\002\000\024\025" +
    "\055\027\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\114\001\002\000\046\002\001\004\041\006" +
    "\025\012\013\016\037\017\017\020\020\021\034\022\011" +
    "\025\014\035\022\060\006\064\005\065\035\067\040\070" +
    "\021\071\012\072\027\001\002\000\004\025\107\001\002" +
    "\000\040\013\uffdb\014\uffdb\026\uffdb\027\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\036\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\066\uffdb\001\002\000\004\065\042\001" +
    "\002\000\004\025\043\001\002\000\006\026\uffcd\065\044" +
    "\001\002\000\006\026\ufff1\032\ufff1\001\002\000\006\026" +
    "\ufff0\032\105\001\002\000\004\026\050\001\002\000\004" +
    "\026\uffef\001\002\000\004\033\051\001\002\000\042\012" +
    "\013\016\037\017\017\020\020\021\034\022\011\025\014" +
    "\030\052\035\022\060\006\064\005\065\054\067\040\070" +
    "\021\071\012\072\027\001\002\000\044\004\041\006\025" +
    "\012\013\016\037\017\017\020\020\021\034\022\011\025" +
    "\014\035\022\060\006\064\005\065\035\067\040\070\021" +
    "\071\012\072\027\001\002\000\010\027\101\043\062\044" +
    "\063\001\002\000\042\013\uffd7\014\uffd7\025\055\026\uffd7" +
    "\027\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\066\uffd7\001\002" +
    "\000\042\012\013\016\037\017\017\020\020\021\034\022" +
    "\011\025\014\026\uffcd\035\022\060\006\064\005\065\054" +
    "\067\040\070\021\071\012\072\027\001\002\000\004\026" +
    "\100\001\002\000\010\026\uffde\032\076\034\uffde\001\002" +
    "\000\006\026\uffdd\034\uffdd\001\002\000\014\026\uffdf\032" +
    "\uffdf\034\uffdf\043\062\044\063\001\002\000\036\016\037" +
    "\017\017\020\020\021\034\022\011\025\014\035\022\060" +
    "\006\064\005\065\054\067\040\070\021\071\012\072\027" +
    "\001\002\000\036\016\037\017\017\020\020\021\034\022" +
    "\011\025\014\035\022\060\006\064\005\065\054\067\040" +
    "\070\021\071\012\072\027\001\002\000\036\013\uffeb\014" +
    "\uffeb\026\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\036\uffeb" +
    "\043\uffeb\044\uffeb\045\066\046\067\047\065\066\uffeb\001" +
    "\002\000\036\016\037\017\017\020\020\021\034\022\011" +
    "\025\014\035\022\060\006\064\005\065\054\067\040\070" +
    "\021\071\012\072\027\001\002\000\036\016\037\017\017" +
    "\020\020\021\034\022\011\025\014\035\022\060\006\064" +
    "\005\065\054\067\040\070\021\071\012\072\027\001\002" +
    "\000\036\016\037\017\017\020\020\021\034\022\011\025" +
    "\014\035\022\060\006\064\005\065\054\067\040\070\021" +
    "\071\012\072\027\001\002\000\040\013\uffe6\014\uffe6\026" +
    "\uffe6\027\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\071\066\uffe6\001" +
    "\002\000\036\016\037\017\017\020\020\021\034\022\011" +
    "\025\014\035\022\060\006\064\005\065\054\067\040\070" +
    "\021\071\012\072\027\001\002\000\040\013\uffe3\014\uffe3" +
    "\026\uffe3\027\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\066\uffe3" +
    "\001\002\000\040\013\uffe7\014\uffe7\026\uffe7\027\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\036\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\071\066\uffe7\001\002\000\040\013" +
    "\uffe5\014\uffe5\026\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\036\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\071\066\uffe5\001\002\000\036\013\uffec\014\uffec\026\uffec" +
    "\027\uffec\032\uffec\033\uffec\034\uffec\036\uffec\043\uffec\044" +
    "\uffec\045\066\046\067\047\065\066\uffec\001\002\000\040" +
    "\012\013\016\037\017\017\020\020\021\034\022\011\025" +
    "\014\035\022\060\006\064\005\065\054\067\040\070\021" +
    "\071\012\072\027\001\002\000\014\026\uffe0\032\uffe0\034" +
    "\uffe0\043\062\044\063\001\002\000\040\013\uffe1\014\uffe1" +
    "\026\uffe1\027\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\066\uffe1" +
    "\001\002\000\050\002\ufff4\004\ufff4\006\ufff4\012\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4\031\ufff4" +
    "\035\ufff4\060\ufff4\064\ufff4\065\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\001\002\000\046\004\041\006\025\012\013" +
    "\016\037\017\017\020\020\021\034\022\011\025\014\031" +
    "\103\035\022\060\006\064\005\065\035\067\040\070\021" +
    "\071\012\072\027\001\002\000\050\002\ufff3\004\ufff3\006" +
    "\ufff3\012\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\025\ufff3\031\ufff3\035\ufff3\060\ufff3\064\ufff3\065\ufff3\067" +
    "\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002\000\050\002\uffff" +
    "\004\uffff\006\uffff\012\uffff\016\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\025\uffff\031\uffff\035\uffff\060\uffff\064\uffff" +
    "\065\uffff\067\uffff\070\uffff\071\uffff\072\uffff\001\002\000" +
    "\004\065\106\001\002\000\006\026\ufff2\032\ufff2\001\002" +
    "\000\040\012\013\016\037\017\017\020\020\021\034\022" +
    "\011\025\014\035\022\060\006\064\005\065\054\067\040" +
    "\070\021\071\012\072\027\001\002\000\010\032\111\043" +
    "\062\044\063\001\002\000\040\012\013\016\037\017\017" +
    "\020\020\021\034\022\011\025\014\035\022\060\006\064" +
    "\005\065\054\067\040\070\021\071\012\072\027\001\002" +
    "\000\010\026\113\043\062\044\063\001\002\000\040\013" +
    "\uffd2\014\uffd2\026\uffd2\027\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\036\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\066\uffd2\001\002\000\040\012\013\016\037\017\017" +
    "\020\020\021\034\022\011\025\014\035\022\060\006\064" +
    "\005\065\054\067\040\070\021\071\012\072\027\001\002" +
    "\000\010\027\116\043\062\044\063\001\002\000\050\002" +
    "\uffee\004\uffee\006\uffee\012\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\025\uffee\031\uffee\035\uffee\060\uffee\064" +
    "\uffee\065\uffee\067\uffee\070\uffee\071\uffee\072\uffee\001\002" +
    "\000\040\012\013\016\037\017\017\020\020\021\034\022" +
    "\011\025\014\035\022\060\006\064\005\065\054\067\040" +
    "\070\021\071\012\072\027\001\002\000\010\026\121\043" +
    "\062\044\063\001\002\000\040\013\uffcf\014\uffcf\026\uffcf" +
    "\027\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\066\uffcf\001\002" +
    "\000\040\012\013\016\037\017\017\020\020\021\034\022" +
    "\011\025\014\035\022\060\006\064\005\065\054\067\040" +
    "\070\021\071\012\072\027\001\002\000\010\027\124\043" +
    "\062\044\063\001\002\000\050\002\uffed\004\uffed\006\uffed" +
    "\012\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\025" +
    "\uffed\031\uffed\035\uffed\060\uffed\064\uffed\065\uffed\067\uffed" +
    "\070\uffed\071\uffed\072\uffed\001\002\000\004\027\126\001" +
    "\002\000\050\002\ufffa\004\ufffa\006\ufffa\012\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa\031\ufffa\035" +
    "\ufffa\060\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\071\ufffa" +
    "\072\ufffa\001\002\000\004\034\130\001\002\000\040\013" +
    "\uffd3\014\uffd3\026\uffd3\027\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\036\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\066\uffd3\001\002\000\040\012\013\016\037\017\017" +
    "\020\020\021\034\022\011\025\014\035\022\060\006\064" +
    "\005\065\054\067\040\070\021\071\012\072\027\001\002" +
    "\000\010\026\133\043\062\044\063\001\002\000\040\013" +
    "\uffd0\014\uffd0\026\uffd0\027\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\036\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\066\uffd0\001\002\000\040\012\013\016\037\017\017" +
    "\020\020\021\034\022\011\025\014\035\022\060\006\064" +
    "\005\065\054\067\040\070\021\071\012\072\027\001\002" +
    "\000\010\026\136\043\062\044\063\001\002\000\040\013" +
    "\uffd1\014\uffd1\026\uffd1\027\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\036\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\066\uffd1\001\002\000\004\002\000\001\002\000\010" +
    "\026\141\043\062\044\063\001\002\000\040\013\uffd6\014" +
    "\uffd6\026\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\066" +
    "\uffd6\001\002\000\012\033\153\043\062\044\063\066\152" +
    "\001\002\000\004\036\144\001\002\000\040\012\013\016" +
    "\037\017\017\020\020\021\034\022\011\025\014\035\022" +
    "\060\006\064\005\065\054\067\040\070\021\071\012\072" +
    "\027\001\002\000\012\013\146\014\147\043\062\044\063" +
    "\001\002\000\040\012\013\016\037\017\017\020\020\021" +
    "\034\022\011\025\014\035\022\060\006\064\005\065\054" +
    "\067\040\070\021\071\012\072\027\001\002\000\030\013" +
    "\ufff8\014\ufff8\026\ufff8\027\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\036\ufff8\043\ufff8\044\ufff8\066\ufff8\001\002\000\010\014" +
    "\151\043\062\044\063\001\002\000\030\013\ufff7\014\ufff7" +
    "\026\ufff7\027\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\043" +
    "\ufff7\044\ufff7\066\ufff7\001\002\000\040\012\013\016\037" +
    "\017\017\020\020\021\034\022\011\025\014\035\022\060" +
    "\006\064\005\065\054\067\040\070\021\071\012\072\027" +
    "\001\002\000\040\012\013\016\037\017\017\020\020\021" +
    "\034\022\011\025\014\035\022\060\006\064\005\065\054" +
    "\067\040\070\021\071\012\072\027\001\002\000\010\036" +
    "\ufff5\043\062\044\063\001\002\000\010\036\ufff6\043\062" +
    "\044\063\001\002\000\040\012\013\016\037\017\017\020" +
    "\020\021\034\022\011\025\014\035\022\060\006\064\005" +
    "\065\054\067\040\070\021\071\012\072\027\001\002\000" +
    "\010\032\160\043\062\044\063\001\002\000\040\012\013" +
    "\016\037\017\017\020\020\021\034\022\011\025\014\035" +
    "\022\060\006\064\005\065\054\067\040\070\021\071\012" +
    "\072\027\001\002\000\010\026\162\043\062\044\063\001" +
    "\002\000\040\013\uffd5\014\uffd5\026\uffd5\027\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\036\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\066\uffd5\001\002\000\004\035\164" +
    "\001\002\000\042\012\013\016\037\017\017\020\020\021" +
    "\034\022\011\025\014\034\uffcd\035\022\060\006\064\005" +
    "\065\054\067\040\070\021\071\012\072\027\001\002\000" +
    "\004\034\166\001\002\000\004\026\167\001\002\000\040" +
    "\013\uffd4\014\uffd4\026\uffd4\027\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\036\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\066\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\034\002\014\003\035\004\032\005\007\006" +
    "\030\007\003\012\031\015\027\016\015\024\022\025\025" +
    "\026\023\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\031\015" +
    "\027\016\015\017\142\024\141\025\025\026\023\027\006" +
    "\001\001\000\020\012\031\015\027\016\015\024\137\025" +
    "\025\026\023\027\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\031\013\056\014\126\015\027\016\015" +
    "\024\060\025\025\026\023\027\006\031\057\001\001\000" +
    "\004\032\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\103\005\007\006" +
    "\030\007\003\012\031\015\027\016\015\024\022\025\025" +
    "\026\023\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\044" +
    "\011\045\031\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\031\015\027\016\015\024\052\025\025\026" +
    "\023\027\006\001\001\000\032\003\101\004\032\005\007" +
    "\006\030\007\003\012\031\015\027\016\015\024\022\025" +
    "\025\026\023\027\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\031\013\056\014\055\015\027\016" +
    "\015\024\060\025\025\026\023\027\006\031\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\031\025\074\026\023\027\006" +
    "\001\001\000\012\012\031\025\063\026\023\027\006\001" +
    "\001\000\002\001\001\000\010\012\031\026\073\027\006" +
    "\001\001\000\010\012\031\026\072\027\006\001\001\000" +
    "\010\012\031\026\067\027\006\001\001\000\002\001\001" +
    "\000\006\012\031\027\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\031\015\027\016\015\024\076\025\025\026\023\027" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\103\005\007\006\030\007\003\012" +
    "\031\015\027\016\015\024\022\025\025\026\023\027\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\031\015\027\016\015" +
    "\024\107\025\025\026\023\027\006\001\001\000\002\001" +
    "\001\000\020\012\031\015\027\016\015\024\111\025\025" +
    "\026\023\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\031\015\027\016\015\024\114\025\025" +
    "\026\023\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\031\015\027\016\015\024\117\025\025" +
    "\026\023\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\031\015\027\016\015\024\122\025\025" +
    "\026\023\027\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\031\015\027\016\015\024" +
    "\131\025\025\026\023\027\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\031\015\027\016\015\024" +
    "\134\025\025\026\023\027\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\031\015\027\016\015\024\144\025\025\026\023\027" +
    "\006\001\001\000\002\001\001\000\020\012\031\015\027" +
    "\016\015\024\147\025\025\026\023\027\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\031\015\027\016\015\024\154\025\025\026\023\027" +
    "\006\001\001\000\020\012\031\015\027\016\015\024\153" +
    "\025\025\026\023\027\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\031\015\027\016\015\024\156" +
    "\025\025\026\023\027\006\001\001\000\002\001\001\000" +
    "\020\012\031\015\027\016\015\024\160\025\025\026\023" +
    "\027\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\031\013\056\014\164\015\027" +
    "\016\015\024\060\025\025\026\023\027\006\031\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArithParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArithParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArithParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  
    }


		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArithParser$actions {
  private final ArithParser parser;

  /** Constructor */
  CUP$ArithParser$actions(ArithParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action_part00000000(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArithParser$result;

      /* select the action based on the action number */
      switch (CUP$ArithParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = start_val;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArithParser$parser.done_parsing();
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = d; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= assignment 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtDefinition a = (StmtDefinition)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = a; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
 RESULT = new Statement(e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= expression NT$0 SEMI 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= funDefn 
            {
              Statement RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		StmtFunDefn fd = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = fd;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // StmtIf ::= IF LogExp COLON expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpIf(le,consqt);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("StmtIf",11, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // StmtIfElse ::= IF LogExp COLON expression ELSE expression END 
            {
              Exp RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		ExpLogic le = (ExpLogic)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int consqtleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int consqtright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp consqt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int altright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp alt = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpIf(le,consqt,alt);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("StmtIfElse",12, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LogExp ::= expression CMP expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Cmp c = (Cmp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,c);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("LogExp",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LogExp ::= expression EQU expression 
            {
              ExpLogic RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp r = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLogic(l,r,Cmp.EQ);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("LogExp",13, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funDefn ::= FUN VAR LPAREN paramListE RPAREN EQU expression SEMI 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,e); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funDefn",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funDefn ::= FUN VAR LPAREN paramListE RPAREN EQU LBRACE stmtList RBRACE 
            {
              StmtFunDefn RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).right;
		ArrayList<String> params = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new StmtFunDefn(v,params,s); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funDefn",5, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-8)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		pl.add(e); RESULT = pl;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",6, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramList",6, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = pl;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<String> var = new ArrayList<String>(); RESULT = var;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("paramListE",7, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment ::= VAR ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
			RESULT = new StmtDefinition(v, e);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definition ::= DEF VAR expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= expression PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = t; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= StmtIf 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = t;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= StmtIfElse 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = e;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= term MUL factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMul(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= term DIV factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpDiv(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= term MOD factor 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpMod(t, f); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= factor POW pow 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		
		RESULT = new ExpPow(f, p); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // factor ::= pow 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funCall ::= VAR LPAREN argListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> a = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpFunCall(v,a);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("funCall",8, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // argList ::= argList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		al.add(e); RESULT = al;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argList",9, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // argListE ::= argList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = pl;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ArrayList<Exp>(); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("argListE",10, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pow ::= INT 
            {
              Exp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLit(ilit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pow ::= DOUBLE 
            {
              Exp RESULT =null;
		int dlitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int dlitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Double dlit = (Double)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLit(dlit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pow ::= STRING 
            {
              Exp RESULT =null;
		int slitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int slitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String slit = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpLit(slit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pow ::= TRUE 
            {
              Exp RESULT =null;
		int tlitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int tlitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Boolean tlit = (Boolean)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLit(tlit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pow ::= FALSE 
            {
              Exp RESULT =null;
		int flitleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int flitright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		Boolean flit = (Boolean)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = new ExpLit(flit); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pow ::= VAR 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pow ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		 RESULT = e; 
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pow ::= ISEQV LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp j = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpEqv(e, j);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // pow ::= LIST LPAREN LSQBRAC argListE RSQBRAC RPAREN 
            {
              Exp RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)).value;
		RESULT = new ExpList(al);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // pow ::= LSQBRAC argListE RSQBRAC 
            {
              Exp RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		ArrayList<Exp> al = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpList(al);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-2)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pow ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp g = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpPair(c,g);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-5)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pow ::= CAR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpCar(p);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pow ::= CDR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpCdr(p);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pow ::= ISPAIR LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-1)).value;
		RESULT = new ExpisPair(p);
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.elementAt(CUP$ArithParser$top-3)), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pow ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$ArithParser$stack.peek()).value;
		RESULT = fc;
              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("pow",21, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // empty ::= 
            {
              Object RESULT =null;

              CUP$ArithParser$result = parser.getSymbolFactory().newSymbol("empty",23, ((java_cup.runtime.Symbol)CUP$ArithParser$stack.peek()), RESULT);
            }
          return CUP$ArithParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArithParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArithParser$do_action(
    int                        CUP$ArithParser$act_num,
    java_cup.runtime.lr_parser CUP$ArithParser$parser,
    java.util.Stack            CUP$ArithParser$stack,
    int                        CUP$ArithParser$top)
    throws java.lang.Exception
    {
              return CUP$ArithParser$do_action_part00000000(
                               CUP$ArithParser$act_num,
                               CUP$ArithParser$parser,
                               CUP$ArithParser$stack,
                               CUP$ArithParser$top);
    }
}

}
