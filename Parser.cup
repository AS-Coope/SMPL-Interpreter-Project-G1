import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
parser code {:
		Lexer lexer;

		public ArithParser(Lexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (lib3652.util.TokenException te) {
		    System.out.println("Unrecognised token on line " +
		    		       lexer.getLine() + ", at pos " +
				       lexer.getChar());
		    System.out.println(te.getMessage());
		    throw te;
		}
	  :};

/* Terminals (tokens returned by the scanner). */
// keywords
terminal FUN, PROC, DEF, CALL, LET, CASE;
terminal IF, ELSE, END, THEN;
terminal PAIR, CAR, CDR, ISPAIR, ISEQV, ISEQUAL, SUBSTR;

// special symbols
terminal LPAREN, RPAREN, SEMI;
terminal LBRACE, RBRACE, COMMA, EQU, RSQBRAC, LSQBRAC;
terminal COLON;

// utilities
terminal PRINT, PRINTLN, READ, READINT;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, POW, ASSIGN;

// relational operators
terminal AND, OR, NOT;

// bitwise operators
terminal BWAND, BWOR, BWNOT;

// list operations
terminal LIST, LSCONCAT, EMPLS;

// comment
terminal INLCOM;

// terminals with values
terminal Integer INT;
terminal String VAR;
terminal Cmp CMP;  
terminal Double DOUBLE; // allows a double passed into the command line to be evaluated
terminal String STRING; // allows a string passed into the command line to be evaluated
terminal Boolean TRUE, FALSE;  

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal Binding bind;
non terminal StmtDefinition definition;
non terminal StmtDefinition assignment; // assigning an expression to an identifier
//non terminal Binding let;
non terminal Binding binding;

/* ** Fix these declarations ** */
non terminal StmtFunDefn funDefn;
non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;
non terminal ExpFunCall funCall;
non terminal ArrayList<Exp> argList;
non terminal ArrayList<Exp> argListE;
non terminal ArrayList<Binding> bindList;
non terminal Exp StmtIf; //TODO replace with IR
non terminal Exp StmtIfElse;
non terminal ExpLogic LogExp;
//non terminal ArrayList<Integer> pair;

/* **** */

non terminal ExpPair pair;
non terminal Exp eqv;
non terminal Exp equal;
non terminal Exp vec;
non terminal Exp ifThen;
non terminal Exp ifThenElse;
non terminal Exp let;
//non terminal Exp compound;
//non terminal Exp randTop;
non terminal Exp expression;
non terminal Exp term;
non terminal Exp factor;
non terminal Exp pow;
non terminal Exp comment;
non terminal empty;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :};

bindList ::= bindList:blst COMMA binding:b {:
			blst.add(b);
			RESULT = blst;
			:} |
			binding:b{:
			ArrayList<Binding> bl = new ArrayList<Binding>();
			bl.add(b);  
			RESULT = bl; 
			:};
binding ::= VAR:v EQU expression:e {: RESULT = new Binding(v, e); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};


stmt ::= definition:d {: RESULT = d; :} | assignment:a {:RESULT = a; :} |
	 expression:e {: RESULT = new Statement(e); :} SEMI | funDefn:fd {:RESULT = fd;:};

/*If grammer*/
/*
StmtIf ::= IF LogExp:le COLON expression:consqt END {:RESULT = new ExpIf(le,consqt);:};
StmtIfElse ::= IF LogExp:le COLON expression:consqt ELSE expression:alt END {:RESULT = new ExpIf(le,consqt,alt);:};
LogExp ::= expression:l CMP:c expression:r {:RESULT = new ExpLogic(l,r,c);:} | expression:l EQU expression:r {:RESULT = new ExpLogic(l,r,Cmp.EQ);:};

ifThen ::= IF expression:pred THEN ifThenElse:consqt {:RESULT = new ExpIf(pred,consqt);:};
ifThenElse ::= IF expression:pred THEN expression:consqt ELSE expression:alt {:RESULT = new ExpIf(pred,consqt,alt);:};

funDefn ::= FUN VAR:v LPAREN paramListE:params RPAREN EQU expression:e SEMI {:RESULT = new StmtFunDefn(v,params,e); :}|  
FUN VAR:v LPAREN paramListE:params RPAREN EQU LBRACE stmtList:s RBRACE {:RESULT = new StmtFunDefn(v,params,s); :};  /* complete this */

//pair ::= PAIR LPAREN expression:c COMMA expression:g RPAREN SEMI{:System.out.println(5);:};

paramList ::= paramList:pl COMMA VAR:e {:pl.add(e); RESULT = pl;:} | VAR:e {:ArrayList<String> var = new ArrayList<String>(); var.add(e); RESULT = var;:};  

paramListE ::= paramList:pl {:RESULT = pl;:} | empty:e {:ArrayList<String> var = new ArrayList<String>(); RESULT = var;:};

assignment ::= VAR:v ASSIGN expression:e SEMI {:
			RESULT = new StmtDefinition(v, e);
		:};

definition ::= DEF VAR:v expression:e SEMI{:
		   RESULT = new StmtDefinition(v, e);
		:};

let ::= LET LPAREN bindList:bl RPAREN pow:p {:RESULT = new ExpLet(bl, p);:};

//eqv ::= ISEQV LPAREN expression:e COMMA expression:j RPAREN {:RESULT = new ExpEqv(e, j);:}; // checking the equivalence

//equal ::= ISEQUAL LPAREN expression:e COMMA expression:j RPAREN {:RESULT = new ExpEqual(e, j);:};
//vec ::= LSQBRAC COLON expression:e COLON RSQBRAC {:RESULT = new SMPLVector(e);:} // e is a list of expressions

//comment ::= INLCOM {:RESULT = null;:}
//let ::= LET LPAREN argList:al RPAREN expression:e {:RESULT = new ExpLet(al, e); :};

expression ::= 	expression:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		expression:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} | 
		term:t {: RESULT = t; :} |
		ifThenElse:ite {:RESULT = ite;:} |
		ifThen:it {:RESULT = it;:};  
		//| StmtIf:t {:RESULT = t;:} | StmtIfElse:e {:RESULT = e;:} |

term ::= term:t MUL factor:f {:
		RESULT = new ExpMul(t, f); :} |
	 term:t DIV factor:f {:
		RESULT = new ExpDiv(t, f); :} |
	 term:t MOD factor:f {:
		RESULT = new ExpMod(t, f); :} |
	 factor:f {: RESULT = f; :};

// production rule for power
factor ::= factor:f POW pow:p {:
		RESULT = new ExpPow(f, p); :} |
	 pow:p {: RESULT = p; :};
	 

funCall ::= VAR:v LPAREN argListE:a RPAREN {:RESULT = new ExpFunCall(v,a);:};

argList ::= argList:al COMMA expression:e {:al.add(e); RESULT = al;:} | expression:e {:ArrayList<Exp> ae = new ArrayList<Exp>(); ae.add(e); RESULT = ae;:};  

argListE ::= argList:pl {:RESULT = pl;:} | empty:e {:RESULT = new ArrayList<Exp>(); :};


pow ::= INT:ilit {: RESULT = new ExpLit(ilit); :} |
		DOUBLE:dlit {: RESULT = new ExpLit(dlit); :} |
		STRING:slit {: RESULT = new ExpLit(slit); :} |
		TRUE:tlit {:RESULT = new ExpLit(tlit); :} |
		FALSE: flit {:RESULT = new ExpLit(flit); :} |
	    VAR:var {: RESULT = new ExpVar(var); :} |
	    LPAREN expression:e RPAREN {: RESULT = e; :} | 
		ISEQV LPAREN expression:e COMMA expression:j RPAREN {:RESULT = new ExpEqv(e, j);:} |
		LIST LPAREN LSQBRAC argListE:al RSQBRAC RPAREN {:RESULT = new ExpList(al);:} |
		LSQBRAC argListE:al RSQBRAC {:RESULT = new ExpList(al);:} |
		PAIR LPAREN expression:c COMMA expression:g RPAREN {:RESULT = new ExpPair(c,g);:} |
		CAR LPAREN expression:p RPAREN {:RESULT = new ExpCar(p);:} |
		CDR LPAREN expression:p RPAREN {:RESULT = new ExpCdr(p);:} | 
		ISPAIR LPAREN expression:p RPAREN {:RESULT = new ExpisPair(p);:} |
		funCall:fc {:RESULT = fc;:} |
		LBRACE stmtList:sl RBRACE {:RESULT = sl;:} | 
		LPAREN stmtList:sl RPAREN {:RESULT = sl;:} |
		PRINT LPAREN expression:e RPAREN {:RESULT = new ExpPrint(e);:}|
		PRINTLN LPAREN expression:e RPAREN {:RESULT = new ExpPrintln(e);:}|
		let:lt {:RESULT = lt; :};
	
	//
empty ::= ;